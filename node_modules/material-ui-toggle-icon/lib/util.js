"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.clipPathSupported = clipPathSupported;

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var _clipPathSupported = null; // Check if clip-path is supported. From http://stackoverflow.com/a/30041538.

function clipPathSupported() {
  if (_clipPathSupported != null) {
    return _clipPathSupported;
  }

  if (typeof document === 'undefined') {
    _clipPathSupported = false;
    return false;
  }

  var base = 'clipPath';
  var prefixes = ['Webkit'];
  var properties = [base].concat(_toConsumableArray(prefixes.map(function (prefix) {
    return prefix + base.charAt(0).toUpperCase() + base.slice(1);
  })));
  var testElement = document.createElement('testelement');
  var attribute = 'polygon(50% 0%, 0% 100%, 100% 100%)'; // Interate over the properties and see if they pass two tests.

  var _iterator = _createForOfIteratorHelper(properties),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var property = _step.value;

      // First, they need to even support clip-path (IE <= 11 does not)...
      if (testElement.style[property] === '') {
        // Second, we need to see what happens when we try to create a CSS shape...
        testElement.style[property] = attribute;

        if (testElement.style[property] !== '' && testElement.style[property] !== 'none') {
          _clipPathSupported = true;
          return true;
        }
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  _clipPathSupported = false;
  return false;
}